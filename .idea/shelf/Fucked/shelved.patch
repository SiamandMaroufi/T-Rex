Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"67f8a3eb-447d-491d-9228-3f4a7e0c7a8d\" name=\"Default Changelist\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/mathematics/Point3D\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/physics.ts\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/physics/Particle.ts\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/game.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/game.js\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/game.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/game.ts\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/index.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/index.html\" afterDir=\"false\" />\n    </list>\n    <ignored path=\"$PROJECT_DIR$/out/\" />\n    <option name=\"EXCLUDED_CONVERTED_TO_IGNORED\" value=\"true\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"DefaultGradleProjectSettings\">\n    <option name=\"isMigrated\" value=\"true\" />\n  </component>\n  <component name=\"FileEditorManager\">\n    <leaf SIDE_TABS_SIZE_LIMIT_KEY=\"300\">\n      <file pinned=\"false\" current-in-tab=\"true\">\n        <entry file=\"file://$PROJECT_DIR$/physics/Particle.ts\">\n          <provider selected=\"true\" editor-type-id=\"text-editor\">\n            <state relative-caret-position=\"15\">\n              <caret line=\"1\" column=\"31\" selection-start-line=\"1\" selection-start-column=\"31\" selection-end-line=\"1\" selection-end-column=\"31\" />\n            </state>\n          </provider>\n        </entry>\n      </file>\n    </leaf>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"IdeDocumentHistory\">\n    <option name=\"CHANGED_PATHS\">\n      <list>\n        <option value=\"$PROJECT_DIR$/game.ts\" />\n        <option value=\"$PROJECT_DIR$/physics.ts\" />\n        <option value=\"$PROJECT_DIR$/physics/Point3D\" />\n        <option value=\"$PROJECT_DIR$/physics/Particle.ts\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"MacroExpansionManager\">\n    <option name=\"directoryName\" value=\"ZqwayUXH\" />\n  </component>\n  <component name=\"ProjectFrameBounds\" extendedState=\"6\">\n    <option name=\"y\" value=\"27\" />\n    <option name=\"width\" value=\"683\" />\n    <option name=\"height\" value=\"741\" />\n  </component>\n  <component name=\"ProjectView\">\n    <navigator proportions=\"\" version=\"1\">\n      <foldersAlwaysOnTop value=\"true\" />\n    </navigator>\n    <panes>\n      <pane id=\"Scope\" />\n      <pane id=\"PackagesPane\" />\n      <pane id=\"ProjectPane\">\n        <subPane>\n          <expand>\n            <path>\n              <item name=\"T-Rex\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"T-Rex\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"T-Rex\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"T-Rex\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"physics\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n          </expand>\n          <select />\n        </subPane>\n      </pane>\n    </panes>\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"jdk.selected.JAVA_MODULE\" value=\"11\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.pluginManager\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/mathmatics\" />\n    </key>\n  </component>\n  <component name=\"RunDashboard\">\n    <option name=\"ruleStates\">\n      <list>\n        <RuleState>\n          <option name=\"name\" value=\"ConfigurationTypeDashboardGroupingRule\" />\n        </RuleState>\n        <RuleState>\n          <option name=\"name\" value=\"StatusDashboardGroupingRule\" />\n        </RuleState>\n      </list>\n    </option>\n  </component>\n  <component name=\"SvnConfiguration\">\n    <configuration />\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"67f8a3eb-447d-491d-9228-3f4a7e0c7a8d\" name=\"Default Changelist\" comment=\"\" />\n      <created>1578302025548</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1578302025548</updated>\n    </task>\n    <servers />\n  </component>\n  <component name=\"ToolWindowManager\">\n    <frame x=\"0\" y=\"25\" width=\"1366\" height=\"743\" extended-state=\"6\" />\n    <editor active=\"true\" />\n    <layout>\n      <window_info active=\"true\" content_ui=\"combo\" id=\"Project\" order=\"0\" visible=\"true\" weight=\"0.27045456\" />\n      <window_info id=\"Structure\" order=\"1\" side_tool=\"true\" weight=\"0.25\" />\n      <window_info id=\"Image Layers\" order=\"2\" />\n      <window_info id=\"Designer\" order=\"3\" />\n      <window_info id=\"UI Designer\" order=\"4\" />\n      <window_info id=\"Capture Tool\" order=\"5\" />\n      <window_info id=\"Favorites\" order=\"6\" side_tool=\"true\" />\n      <window_info anchor=\"bottom\" id=\"Message\" order=\"0\" />\n      <window_info anchor=\"bottom\" id=\"Find\" order=\"1\" />\n      <window_info anchor=\"bottom\" id=\"Run\" order=\"2\" />\n      <window_info anchor=\"bottom\" id=\"Debug\" order=\"3\" weight=\"0.4\" />\n      <window_info anchor=\"bottom\" id=\"Cvs\" order=\"4\" weight=\"0.25\" />\n      <window_info anchor=\"bottom\" id=\"Inspection\" order=\"5\" weight=\"0.4\" />\n      <window_info anchor=\"bottom\" id=\"TODO\" order=\"6\" />\n      <window_info anchor=\"bottom\" id=\"Terminal\" order=\"7\" />\n      <window_info anchor=\"bottom\" id=\"Event Log\" order=\"8\" side_tool=\"true\" />\n      <window_info anchor=\"bottom\" id=\"Version Control\" order=\"9\" />\n      <window_info anchor=\"right\" id=\"Commander\" internal_type=\"SLIDING\" order=\"0\" type=\"SLIDING\" weight=\"0.4\" />\n      <window_info anchor=\"right\" id=\"Ant Build\" order=\"1\" weight=\"0.25\" />\n      <window_info anchor=\"right\" content_ui=\"combo\" id=\"Hierarchy\" order=\"2\" weight=\"0.25\" />\n      <window_info anchor=\"right\" id=\"Palette\" order=\"3\" />\n      <window_info anchor=\"right\" id=\"Maven\" order=\"4\" />\n      <window_info anchor=\"right\" id=\"Theme Preview\" order=\"5\" />\n      <window_info anchor=\"right\" id=\"Cargo\" order=\"6\" />\n      <window_info anchor=\"right\" id=\"Capture Analysis\" order=\"7\" />\n      <window_info anchor=\"right\" id=\"Palette&#9;\" order=\"8\" />\n    </layout>\n  </component>\n  <component name=\"editorHistoryManager\">\n    <entry file=\"file://$PROJECT_DIR$/physics.ts\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"471\">\n          <caret line=\"64\" selection-start-line=\"64\" selection-end-line=\"64\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/game.ts\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"105\">\n          <caret line=\"10\" column=\"1\" selection-start-line=\"10\" selection-start-column=\"1\" selection-end-line=\"10\" selection-end-column=\"1\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/mathematics/Point3D\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"45\">\n          <caret line=\"3\" column=\"12\" selection-start-line=\"3\" selection-start-column=\"12\" selection-end-line=\"3\" selection-end-column=\"12\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/physics/Particle.ts\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"15\">\n          <caret line=\"1\" column=\"31\" selection-start-line=\"1\" selection-start-column=\"31\" selection-end-line=\"1\" selection-end-column=\"31\" />\n        </state>\n      </provider>\n    </entry>\n  </component>\n  <component name=\"masterDetails\">\n    <states>\n      <state key=\"ProjectJDKs.UI\">\n        <settings>\n          <last-edited>11</last-edited>\n          <splitter-proportions>\n            <option name=\"proportions\">\n              <list>\n                <option value=\"0.2\" />\n              </list>\n            </option>\n          </splitter-proportions>\n        </settings>\n      </state>\n    </states>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(date 1578779185000)
+++ .idea/workspace.xml	(date 1578835231304)
@@ -2,12 +2,23 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="67f8a3eb-447d-491d-9228-3f4a7e0c7a8d" name="Default Changelist" comment="">
-      <change afterPath="$PROJECT_DIR$/mathematics/Point3D" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Bar.js" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Bar.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ClassicalPhysics.js" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ClassicalPhysics.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Ground.js" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Ground.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Particle.js" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Particle.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/mathmatics.js" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/mathmatics.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/physics-demo.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/physics.html" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/physics.js" afterDir="false" />
       <change afterPath="$PROJECT_DIR$/physics.ts" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/physics/Particle.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/game.js" beforeDir="false" afterPath="$PROJECT_DIR$/game.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/game.ts" beforeDir="false" afterPath="$PROJECT_DIR$/game.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/index.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/require.js" beforeDir="false" />
     </list>
     <ignored path="$PROJECT_DIR$/out/" />
     <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
@@ -22,10 +33,10 @@
   <component name="FileEditorManager">
     <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
       <file pinned="false" current-in-tab="true">
-        <entry file="file://$PROJECT_DIR$/physics/Particle.ts">
+        <entry file="file://$PROJECT_DIR$/physics.html">
           <provider selected="true" editor-type-id="text-editor">
-            <state relative-caret-position="15">
-              <caret line="1" column="31" selection-start-line="1" selection-start-column="31" selection-end-line="1" selection-end-column="31" />
+            <state relative-caret-position="161">
+              <caret line="32" column="52" selection-start-line="32" selection-start-column="52" selection-end-line="32" selection-end-column="52" />
             </state>
           </provider>
         </entry>
@@ -42,6 +53,8 @@
         <option value="$PROJECT_DIR$/physics.ts" />
         <option value="$PROJECT_DIR$/physics/Point3D" />
         <option value="$PROJECT_DIR$/physics/Particle.ts" />
+        <option value="$PROJECT_DIR$/PhysicsTest.html" />
+        <option value="$PROJECT_DIR$/physics.html" />
       </list>
     </option>
   </component>
@@ -58,31 +71,21 @@
       <foldersAlwaysOnTop value="true" />
     </navigator>
     <panes>
+      <pane id="PackagesPane" />
+      <pane id="ProjectPane" />
       <pane id="Scope" />
-      <pane id="PackagesPane" />
-      <pane id="ProjectPane">
-        <subPane>
-          <expand>
-            <path>
-              <item name="T-Rex" type="b2602c69:ProjectViewProjectNode" />
-              <item name="T-Rex" type="462c0819:PsiDirectoryNode" />
-            </path>
-            <path>
-              <item name="T-Rex" type="b2602c69:ProjectViewProjectNode" />
-              <item name="T-Rex" type="462c0819:PsiDirectoryNode" />
-              <item name="physics" type="462c0819:PsiDirectoryNode" />
-            </path>
-          </expand>
-          <select />
-        </subPane>
-      </pane>
     </panes>
   </component>
   <component name="PropertiesComponent">
+    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
     <property name="jdk.selected.JAVA_MODULE" value="11" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
     <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
   </component>
   <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$" />
+    </key>
     <key name="MoveFile.RECENT_KEYS">
       <recent name="$PROJECT_DIR$/mathmatics" />
     </key>
@@ -116,13 +119,14 @@
     <frame x="0" y="25" width="1366" height="743" extended-state="6" />
     <editor active="true" />
     <layout>
-      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.27045456" />
+      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.275" />
       <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
       <window_info id="Image Layers" order="2" />
       <window_info id="Designer" order="3" />
       <window_info id="UI Designer" order="4" />
       <window_info id="Capture Tool" order="5" />
       <window_info id="Favorites" order="6" side_tool="true" />
+      <window_info anchor="bottom" id="Messages" />
       <window_info anchor="bottom" id="Message" order="0" />
       <window_info anchor="bottom" id="Find" order="1" />
       <window_info anchor="bottom" id="Run" order="2" />
@@ -130,9 +134,9 @@
       <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
       <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
       <window_info anchor="bottom" id="TODO" order="6" />
-      <window_info anchor="bottom" id="Terminal" order="7" />
+      <window_info anchor="bottom" id="Terminal" order="7" visible="true" weight="0.3284553" />
       <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" />
-      <window_info anchor="bottom" id="Version Control" order="9" />
+      <window_info anchor="bottom" id="Version Control" order="9" weight="0.3284553" />
       <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
       <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
       <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
@@ -152,13 +156,6 @@
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/game.ts">
-      <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="105">
-          <caret line="10" column="1" selection-start-line="10" selection-start-column="1" selection-end-line="10" selection-end-column="1" />
-        </state>
-      </provider>
-    </entry>
     <entry file="file://$PROJECT_DIR$/mathematics/Point3D">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="45">
@@ -170,6 +167,30 @@
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="15">
           <caret line="1" column="31" selection-start-line="1" selection-start-column="31" selection-end-line="1" selection-end-column="31" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/Graphics.js">
+      <provider selected="true" editor-type-id="text-editor" />
+    </entry>
+    <entry file="file://$PROJECT_DIR$/game.ts">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="656">
+          <caret line="108" column="21" lean-forward="true" selection-start-line="108" selection-start-column="21" selection-end-line="108" selection-end-column="21" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/physics-demo.ts">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="225">
+          <caret line="15" column="32" lean-forward="true" selection-start-line="15" selection-start-column="32" selection-end-line="15" selection-end-column="32" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/physics.html">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="161">
+          <caret line="32" column="52" selection-start-line="32" selection-start-column="52" selection-end-line="32" selection-end-column="52" />
         </state>
       </provider>
     </entry>
Index: physics_demo.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- physics_demo.js	(date 1578835247320)
+++ physics_demo.js	(date 1578835247320)
@@ -0,0 +1,92 @@
+(function (deps, factory) {
+    if (typeof module === 'object' && typeof module.exports === 'object') {
+        var v = factory(require, exports); if (v !== undefined) module.exports = v;
+    }
+    else if (typeof define === 'function' && define.amd) {
+        define(deps, factory);
+    }
+})(["require", "exports", "./physics", "./mathmatics", "./Graphics", "./Particle", "./Bar", "./Ground"], function (require, exports) {
+    var physics_1 = require("./physics");
+    var mathmatics_1 = require("./mathmatics");
+    var Graphics_1 = require("./Graphics");
+    var Particle_1 = require("./Particle");
+    var Bar_1 = require("./Bar");
+    var Ground_1 = require("./Ground");
+    var Game = (function () {
+        function Game() {
+            var _this = this;
+            this.environemt = new physics_1.Environment();
+            this.ground = new Ground_1.Ground();
+            this.elements = [];
+            this.playing = false;
+            this.el = document.getElementById('screen');
+            this.width = this.el.width = window.innerWidth - 20;
+            this.height = this.el.height = window.innerHeight - 20;
+            this.graphics = new Graphics_1.Graphics(this.el.getContext('2d'), this.el.width, this.el.height);
+            this.add(new Bar_1.Bar(5, 10, this.el.width - 5, 10));
+            this.add(new Bar_1.Bar(10, 10, 10, this.el.height - 20));
+            this.add(new Bar_1.Bar(this.el.width - 20, 10, this.el.width - 20, this.el.height - 20));
+            this.add(new Bar_1.Bar(5, this.el.height - 40, this.el.width - 10, this.el.height - 60));
+            // this.add(new Bar(10, 10, this.el.width - 20, 10))
+            // this.add(new Bar(350, 450, 200, 200))
+            var p = new Particle_1.Particle();
+            p.position = new mathmatics_1.Point(400, 100);
+            p.velocity = new mathmatics_1.Vector(30, -20);
+            this.add(p);
+            var x = 0;
+            var y = 0;
+            this.el.addEventListener('mousedown', function (event) {
+                x = event.clientX;
+                y = event.clientY;
+            });
+            this.el.addEventListener('mouseup', function (event) {
+                var p = new Particle_1.Particle();
+                p.position.x = x;
+                p.position.y = y;
+                p.velocity.x = (event.x - x);
+                p.velocity.y = (event.y - y);
+                _this.add(p);
+            });
+            // this.add(this.ground); 
+        }
+        Game.prototype.add = function (element) {
+            this.environemt.elements.push(element);
+            this.elements.push(element);
+        };
+        Game.prototype.randomVelocity = function () {
+            var neg = 5;
+            var pos = 10;
+            return new mathmatics_1.Vector(2 * (neg - Math.random() * pos), neg - Math.random() * pos);
+        };
+        Game.prototype.addRandomParticle = function () {
+            var p = new Particle_1.Particle();
+            p.position.x = 50 + Math.random() * (this.width - 100);
+            p.position.y = 50 + Math.random() * (this.height - 100);
+            p.velocity = this.randomVelocity();
+            this.add(p);
+        };
+        Game.prototype.play = function () {
+            this.playing = true;
+            this.render();
+        };
+        Game.prototype.pause = function () {
+            this.playing = false;
+        };
+        Game.prototype.render = function () {
+            var _this = this;
+            this.environemt.cycle();
+            this.el.width = this.el.width;
+            // this.graphics.clear();
+            for (var _i = 0, _a = this.elements; _i < _a.length; _i++) {
+                var el_1 = _a[_i];
+                el_1.render(this.graphics);
+            }
+            if (this.playing) {
+                setTimeout(function () { return requestAnimationFrame(function () { return _this.render(); }); }, 50);
+            }
+        };
+        return Game;
+    })();
+    var game = new Game();
+    game.play();
+});
Index: PhysicsTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PhysicsTest.js	(date 1578835247316)
+++ PhysicsTest.js	(date 1578835247316)
@@ -0,0 +1,109 @@
+(function (deps, factory) {
+    if (typeof module === 'object' && typeof module.exports === 'object') {
+        var v = factory(require, exports); if (v !== undefined) module.exports = v;
+    }
+    else if (typeof define === 'function' && define.amd) {
+        define(deps, factory);
+    }
+})(["require", "exports", "./Graphics", "./physics/Environemnt", "./physics/Shapes/Fabric", "./physics/Shapes/Sphare"], function (require, exports) {
+    var Graphics_1 = require("./Graphics");
+    var Environemnt_1 = require("./physics/Environemnt");
+    var Fabric_1 = require("./physics/Shapes/Fabric");
+    var Sphare_1 = require("./physics/Shapes/Sphare");
+    var mesh1;
+    var mesh2;
+    var Game = (function () {
+        function Game(container) {
+            this.container = container;
+            this.init();
+            this.render();
+        }
+        Game.prototype.init = function () {
+            this.canvas = document.createElement('canvas');
+            this.container.appendChild(this.canvas);
+            this.width = this.canvas.width = this.container.clientWidth;
+            this.height = this.canvas.height = this.container.clientHeight;
+            this.mid = this.height / 2;
+            this.env = new Environemnt_1.default(this.width, this.height);
+            var r = 45;
+            var c = 30;
+            // const f = new Fabric(-100, -150, 200, 20, c, r)
+            var f = new Fabric_1.Fabric(-250, -150, -250, 600, 600, 20);
+            f.particles[0].locked = true;
+            f.particles[29].locked = true;
+            // f.particles[f.particles.length - 1].locked = true;
+            // f.particles[f.particles.length - 30].locked = true;
+            // f.particles[r - 1].locked = true;
+            // f.particles[r * c - 1].add(new Point3D(0, 100, 50));
+            // f.particles[r * c - 1].locked = true;
+            // f.particles[r * c - c].locked = true
+            // f.particles[r * c - c].add(new Point3D(0, 100, 50))
+            var c1, c2, c3, c4, c5, c6;
+            this.env.add(c1 = new Sphare_1.Sphare(0, -100, 0, 5));
+            this.env.add(c2 = new Sphare_1.Sphare(-200, 50, 190, 70, false));
+            this.env.add(c3 = new Sphare_1.Sphare(200, 70, -50, 50, false));
+            this.env.add(c4 = new Sphare_1.Sphare(200, 100, 0, 50, false));
+            // this.env.add(c5 = new Sphare(200, -20, 10, 50, false));
+            // this.env.add(c6 = new Sphare(200, -100, -200, 50, false));
+            // this.env.shapes.push(new Sphare(0, 200, 0, 10, false));
+            c1.color = 'black';
+            c2.color = 'blue';
+            c1.link(c2);
+            c1.link(c3);
+            c1.link(c4);
+            // c1.link(c5);
+            // this.env.add(new Box(-300, 160, 50, 60, 10, 60));
+            // this.env.add(new Box(-300, 280, 50, 60, 10, 60));
+            // this.env.add(new Box(-300, 250, 50, 60, 10, 60));
+            this.env.add(f);
+        };
+        Game.prototype.render = function () {
+            var _this = this;
+            this.clearCanvas();
+            var ctx = this.canvas.getContext('2d');
+            var graphics = new Graphics_1.Graphics(ctx, this.width, this.height, { distance: 800 });
+            for (var _i = 0, _a = this.env.shapes; _i < _a.length; _i++) {
+                var sh = _a[_i];
+                sh.draw(graphics);
+            }
+            this.env.update();
+            if (this.playing) {
+                setTimeout(function () {
+                    requestAnimationFrame(function () { return _this.render(); });
+                }, 5);
+            }
+        };
+        Game.prototype.dots = function (graphics, z) {
+            if (z === void 0) { z = 0; }
+            graphics.fill('blue');
+            graphics.fillCircle3D(-100, -100, z);
+            graphics.fill('red');
+            graphics.fillCircle3D(100, -100, z);
+            graphics.fill('black');
+            graphics.fillCircle3D(-100, 100, z);
+            graphics.fill('green');
+            graphics.fillCircle3D(100, 100, z);
+        };
+        Game.prototype.play = function () {
+            this.playing = true;
+            this.render();
+        };
+        Game.prototype.stop = function () {
+            this.playing = false;
+        };
+        Game.prototype.clearCanvas = function () {
+            this.canvas.width = this.canvas.width;
+        };
+        return Game;
+    })();
+    var el = document.getElementById('screen');
+    var game = new Game(el);
+    window.addEventListener('keypress', function (event) {
+        if (event.key === " ") {
+            game.playing = !game.playing;
+            if (game.playing)
+                game.play();
+            return false;
+        }
+    });
+});
Index: physics_demo.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- physics_demo.ts	(date 1578835038517)
+++ physics_demo.ts	(date 1578835038517)
@@ -0,0 +1,112 @@
+import { Environment } from "./physics";
+import { ClassicalPhysics } from "./ClassicalPhysics";
+import { Vector, Point } from "./mathmatics";
+import { Graphics } from "./Graphics";
+import { Particle } from "./Particle";
+import { Bar } from "./Bar";
+import { Ground } from "./Ground";
+
+export interface Renderable {
+  render(g: Graphics);
+}
+
+class Game {
+  private el: HTMLCanvasElement;
+  private environemt = new Environment();
+  private ground = new Ground();
+  private graphics: Graphics;
+  private elements: Renderable[] = []
+  private playing = false;
+  private width: number;
+  private height: number;
+
+  constructor() {
+    this.el = <HTMLCanvasElement>document.getElementById('screen');
+    this.width = this.el.width = window.innerWidth - 20;
+    this.height = this.el.height = window.innerHeight - 20;
+    this.graphics = new Graphics(this.el.getContext('2d'), this.el.width, this.el.height);
+
+    this.add(new Bar(5, 10, this.el.width - 5, 10))
+    this.add(new Bar(10, 10, 10, this.el.height - 20))
+    this.add(new Bar(this.el.width - 20, 10, this.el.width - 20, this.el.height - 20))
+    this.add(new Bar(5, this.el.height - 40, this.el.width - 10, this.el.height - 60))
+
+    // this.add(new Bar(10, 10, this.el.width - 20, 10))
+
+    // this.add(new Bar(350, 450, 200, 200))
+
+    let p = new Particle();
+    p.position = new Point(400, 100);
+    p.velocity = new Vector(30, -20);
+    this.add(p);
+
+    let x = 0; let y = 0;
+    this.el.addEventListener('mousedown', (event) => {
+      x = event.clientX;
+      y = event.clientY;
+    })
+
+    this.el.addEventListener('mouseup', (event) => {
+
+      const p = new Particle();
+      p.position.x = x;
+      p.position.y = y;
+      p.velocity.x = (event.x - x);
+      p.velocity.y = (event.y - y);
+      this.add(p);
+
+    })
+
+    // this.add(this.ground); 
+
+  }
+
+
+  add(element) {
+    this.environemt.elements.push(element)
+    this.elements.push(element)
+  }
+
+  randomVelocity() {
+    let neg = 5;
+    let pos = 10;
+    return new Vector(2 * (neg - Math.random() * pos), neg - Math.random() * pos);
+  }
+
+  addRandomParticle() {
+
+    let p = new Particle()
+    p.position.x = 50 + Math.random() * (this.width - 100);
+    p.position.y = 50 + Math.random() * (this.height - 100);
+    p.velocity = this.randomVelocity();
+
+    this.add(p)
+  }
+
+  play() {
+    this.playing = true;
+    this.render()
+  }
+
+  pause() {
+    this.playing = false;
+  }
+
+  render() {
+    this.environemt.cycle();
+    this.el.width = this.el.width;
+    // this.graphics.clear();
+    for (let el of this.elements) {
+      el.render(this.graphics);
+    }
+
+    if (this.playing) {
+      setTimeout(() => requestAnimationFrame(() => this.render()), 50);
+    }
+  }
+}
+
+let game = new Game()
+
+game.play();
+
Index: physics-demo.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- physics-demo.js	(date 1578835139631)
+++ physics-demo.js	(date 1578835139631)
@@ -0,0 +1,92 @@
+(function (deps, factory) {
+    if (typeof module === 'object' && typeof module.exports === 'object') {
+        var v = factory(require, exports); if (v !== undefined) module.exports = v;
+    }
+    else if (typeof define === 'function' && define.amd) {
+        define(deps, factory);
+    }
+})(["require", "exports", "./physics", "./mathmatics", "./Graphics", "./Particle", "./Bar", "./Ground"], function (require, exports) {
+    var physics_1 = require("./physics");
+    var mathmatics_1 = require("./mathmatics");
+    var Graphics_1 = require("./Graphics");
+    var Particle_1 = require("./Particle");
+    var Bar_1 = require("./Bar");
+    var Ground_1 = require("./Ground");
+    var Game = (function () {
+        function Game() {
+            var _this = this;
+            this.environemt = new physics_1.Environment();
+            this.ground = new Ground_1.Ground();
+            this.elements = [];
+            this.playing = false;
+            this.el = document.getElementById('screen');
+            this.width = this.el.width = window.innerWidth - 20;
+            this.height = this.el.height = window.innerHeight - 20;
+            this.graphics = new Graphics_1.Graphics(this.el.getContext('2d'), this.el.width, this.el.height);
+            this.add(new Bar_1.Bar(5, 10, this.el.width - 5, 10));
+            this.add(new Bar_1.Bar(10, 10, 10, this.el.height - 20));
+            this.add(new Bar_1.Bar(this.el.width - 20, 10, this.el.width - 20, this.el.height - 20));
+            this.add(new Bar_1.Bar(5, this.el.height - 40, this.el.width - 10, this.el.height - 60));
+            // this.add(new Bar(10, 10, this.el.width - 20, 10))
+            // this.add(new Bar(350, 450, 200, 200))
+            var p = new Particle_1.Particle();
+            p.position = new mathmatics_1.Point(400, 100);
+            p.velocity = new mathmatics_1.Vector(30, -20);
+            this.add(p);
+            var x = 0;
+            var y = 0;
+            this.el.addEventListener('mousedown', function (event) {
+                x = event.clientX;
+                y = event.clientY;
+            });
+            this.el.addEventListener('mouseup', function (event) {
+                var p = new Particle_1.Particle();
+                p.position.x = x;
+                p.position.y = y;
+                p.velocity.x = (event.x - x);
+                p.velocity.y = (event.y - y);
+                _this.add(p);
+            });
+            // this.add(this.ground); 
+        }
+        Game.prototype.add = function (element) {
+            this.environemt.elements.push(element);
+            this.elements.push(element);
+        };
+        Game.prototype.randomVelocity = function () {
+            var neg = 5;
+            var pos = 10;
+            return new mathmatics_1.Vector(2 * (neg - Math.random() * pos), neg - Math.random() * pos);
+        };
+        Game.prototype.addRandomParticle = function () {
+            var p = new Particle_1.Particle();
+            p.position.x = 50 + Math.random() * (this.width - 100);
+            p.position.y = 50 + Math.random() * (this.height - 100);
+            p.velocity = this.randomVelocity();
+            this.add(p);
+        };
+        Game.prototype.play = function () {
+            this.playing = true;
+            this.render();
+        };
+        Game.prototype.pause = function () {
+            this.playing = false;
+        };
+        Game.prototype.render = function () {
+            var _this = this;
+            this.environemt.cycle();
+            this.el.width = this.el.width;
+            // this.graphics.clear();
+            for (var _i = 0, _a = this.elements; _i < _a.length; _i++) {
+                var el_1 = _a[_i];
+                el_1.render(this.graphics);
+            }
+            if (this.playing) {
+                setTimeout(function () { return requestAnimationFrame(function () { return _this.render(); }); }, 50);
+            }
+        };
+        return Game;
+    })();
+    var game = new Game();
+    game.play();
+});
Index: Particle.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Particle.js	(date 1578835247284)
+++ Particle.js	(date 1578835247284)
@@ -0,0 +1,39 @@
+var __extends = (this && this.__extends) || function (d, b) {
+    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
+    function __() { this.constructor = d; }
+    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+};
+(function (deps, factory) {
+    if (typeof module === 'object' && typeof module.exports === 'object') {
+        var v = factory(require, exports); if (v !== undefined) module.exports = v;
+    }
+    else if (typeof define === 'function' && define.amd) {
+        define(deps, factory);
+    }
+})(["require", "exports", "./Thing"], function (require, exports) {
+    var Thing_1 = require("./Thing");
+    var Particle = (function (_super) {
+        __extends(Particle, _super);
+        function Particle() {
+            _super.call(this);
+            this.radius = 5;
+            this.locked = false;
+            this.mass = 1000;
+        }
+        Particle.prototype.render = function (graphics) {
+            graphics.fill('#333');
+            graphics.fillCircle(this.position.x, this.position.y, this.radius);
+            graphics.fill('red');
+            var ss = Math.floor(this.velocity.x) + " " + Math.floor(this.velocity.y);
+            graphics.fillText(this.position.x + 40, this.position.y, ss);
+            // graphics.drawLine(
+            //     this.position.x,
+            //     this.position.y,
+            //     (this.position.x + this.velocity.x * 5),
+            //     (this.position.y + this.velocity.y * 5)
+            // );
+        };
+        return Particle;
+    })(Thing_1.Thing);
+    exports.Particle = Particle;
+});
Index: ClassicalPhysics.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ClassicalPhysics.js	(date 1578835247284)
+++ ClassicalPhysics.js	(date 1578835247284)
@@ -0,0 +1,114 @@
+(function (deps, factory) {
+    if (typeof module === 'object' && typeof module.exports === 'object') {
+        var v = factory(require, exports); if (v !== undefined) module.exports = v;
+    }
+    else if (typeof define === 'function' && define.amd) {
+        define(deps, factory);
+    }
+})(["require", "exports", './mathmatics', './Thing', './physics'], function (require, exports) {
+    var mathmatics_1 = require('./mathmatics');
+    var Thing_1 = require('./Thing');
+    var physics_1 = require('./physics');
+    var ClassicalPhysics = (function () {
+        function ClassicalPhysics() {
+        }
+        ClassicalPhysics.accelerate = function (element, vector) {
+            element.velocity.add(vector);
+        };
+        ClassicalPhysics.gravitate = function (element, gravityEl) {
+            var dx = element.position.x - gravityEl.position.x, dy = element.position.y - gravityEl.position.y, distance = element.position.distanceTo(gravityEl.position), force = (gravityEl.mass * physics_1.SIMULATION_FACTOR) / Math.pow(distance, 2);
+            if (distance === 0 || isNaN(distance)) {
+                return new mathmatics_1.Vector(0, 0); //TODO: fix
+            }
+            var x = dx / distance * force;
+            var y = dy / distance * force;
+            if (isNaN(x) || isNaN(y)) {
+                return new mathmatics_1.Vector(0, 0); //TODO: fix
+            }
+            return new mathmatics_1.Vector(x, y);
+        };
+        ClassicalPhysics.applyEnvironmentGravity = function (env) {
+            var gravityEl = new Thing_1.Thing();
+            gravityEl.mass = 10000 * physics_1.TON;
+            for (var _i = 0, _a = env.elements; _i < _a.length; _i++) {
+                var el_1 = _a[_i];
+                gravityEl.position.x = el_1.position.x; // flat earth :P (just jocking)
+                var gravityForce = this.gravitate(el_1, gravityEl);
+                this.accelerate(el_1, gravityForce);
+            }
+        };
+        ClassicalPhysics.applyElementsGravity = function (env) {
+            for (var _i = 0, _a = env.elements; _i < _a.length; _i++) {
+                var thing = _a[_i];
+                for (var _b = 0, _c = env.elements; _b < _c.length; _b++) {
+                    var gravEl = _c[_b];
+                    if (thing === gravEl)
+                        continue;
+                    this.accelerate(thing, this.gravitate(thing, gravEl));
+                }
+            }
+        };
+        ClassicalPhysics.applyGravity = function (env) {
+            this.applyEnvironmentGravity(env);
+            this.applyElementsGravity(env);
+        };
+        ClassicalPhysics.findCollosion = function (env, el) {
+            var newPoint = new mathmatics_1.Point(el.position.x + el.velocity.x, el.position.y + el.velocity.y);
+            var movement = new mathmatics_1.Line(el.position, newPoint);
+            var collesion = null;
+            var minDistance = Infinity;
+            var intersect = null;
+            for (var _i = 0, _a = env.elements; _i < _a.length; _i++) {
+                var c = _a[_i];
+                if (c === el)
+                    continue;
+                var pointOfIntersect = c.intersect(movement);
+                if (pointOfIntersect != null) {
+                    intersect = pointOfIntersect;
+                    var distance = intersect.distanceTo(el.position);
+                    if (distance < minDistance) {
+                        minDistance = distance;
+                        collesion = c;
+                    }
+                }
+            }
+            if (!collesion)
+                return null;
+            return {
+                element: collesion,
+                point: intersect,
+                distance: minDistance
+            };
+        };
+        ClassicalPhysics.applyEnvironmentEffect = function (env) {
+            this.applyGravity(env);
+            // this.applyClimate()
+            // this.applyAtmosphere()
+            for (var _i = 0, _a = env.elements; _i < _a.length; _i++) {
+                var el_2 = _a[_i];
+                if (!el_2.locked) {
+                    var collesion = this.findCollosion(env, el_2);
+                    if (collesion) {
+                        // console.clear();
+                        console.log('hittted');
+                        // console.log(el)
+                        var newPos = new mathmatics_1.Vector(collesion.point.x - el_2.position.x, collesion.point.y - el_2.position.y);
+                        newPos.length += (newPos.length > 0) ? -5 : 5;
+                        el_2.move(newPos);
+                        // console.log(el.velocity.x, el.velocity.y);
+                        var dx = collesion.point.angleTo(el_2.position);
+                        el_2.velocity.angle = dx - Math.PI / 2;
+                        collesion.element.hit(el_2, collesion.point);
+                    }
+                    else {
+                        el_2.move(el_2.velocity);
+                    }
+                }
+                else {
+                    el_2.velocity = physics_1.STABLE_POINT;
+                }
+            }
+        };
+        return ClassicalPhysics;
+    })();
+    exports.Classical
\ No newline at end of file
Index: Bar.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Bar.js	(date 1578835247276)
+++ Bar.js	(date 1578835247276)
@@ -0,0 +1,37 @@
+var __extends = (this && this.__extends) || function (d, b) {
+    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
+    function __() { this.constructor = d; }
+    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+};
+(function (deps, factory) {
+    if (typeof module === 'object' && typeof module.exports === 'object') {
+        var v = factory(require, exports); if (v !== undefined) module.exports = v;
+    }
+    else if (typeof define === 'function' && define.amd) {
+        define(deps, factory);
+    }
+})(["require", "exports", "./Thing", "./mathmatics"], function (require, exports) {
+    var Thing_1 = require("./Thing");
+    var mathmatics_1 = require("./mathmatics");
+    var Bar = (function (_super) {
+        __extends(Bar, _super);
+        function Bar(x1, y1, x2, y2, color) {
+            if (color === void 0) { color = 'red'; }
+            _super.call(this);
+            this.x1 = x1;
+            this.y1 = y1;
+            this.x2 = x2;
+            this.y2 = y2;
+            this.color = color;
+        }
+        Bar.prototype.render = function (graphics) {
+            graphics.stroke(this.color, 3);
+            graphics.drawLine(this.x1, this.y1, this.x2, this.y2);
+        };
+        Bar.prototype.intersect = function (line) {
+            return line.intersect(new mathmatics_1.Line(new mathmatics_1.Point(this.x1, this.y1), new mathmatics_1.Point(this.x2, this.y2)));
+        };
+        return Bar;
+    })(Thing_1.Thing);
+    exports.Bar = Bar;
+});
Index: Particle.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Particle.ts	(date 1578835038513)
+++ Particle.ts	(date 1578835038513)
@@ -0,0 +1,26 @@
+import { Thing } from "./Thing";
+import { Graphics } from "./Graphics";
+import { Renderable } from "./game";
+import { Line } from "./mathmatics";
+export class Particle extends Thing implements Renderable {
+    radius: number = 5;
+    constructor() {
+        super();
+        this.locked = false;
+        this.mass = 1000;
+    }
+    render(graphics: Graphics) {
+        graphics.fill('#333');
+        graphics.fillCircle(this.position.x, this.position.y, this.radius);
+        graphics.fill('red');
+        let ss = Math.floor(this.velocity.x) + " " + Math.floor(this.velocity.y)
+        graphics.fillText(this.position.x + 40, this.position.y, ss)
+
+        // graphics.drawLine(
+        //     this.position.x,
+        //     this.position.y,
+        //     (this.position.x + this.velocity.x * 5),
+        //     (this.position.y + this.velocity.y * 5)
+        // );
+    }
+}
Index: Bar.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Bar.ts	(date 1578835038509)
+++ Bar.ts	(date 1578835038509)
@@ -0,0 +1,16 @@
+import { Thing } from "./Thing";
+import { Line, Point } from "./mathmatics";
+import { Graphics } from "./Graphics";
+import { Renderable } from "./game";
+export class Bar extends Thing implements Renderable {
+    constructor(public x1: number, public y1: number, public x2: number, public y2: number, public color = 'red') {
+        super();
+    }
+    render(graphics: Graphics) {
+        graphics.stroke(this.color, 3);
+        graphics.drawLine(this.x1, this.y1, this.x2, this.y2);
+    }
+    intersect(line: Line) {
+        return line.intersect(new Line(new Point(this.x1, this.y1), new Point(this.x2, this.y2)));
+    }
+}
Index: physics.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- physics.js	(date 1578835247276)
+++ physics.js	(date 1578835247276)
@@ -0,0 +1,48 @@
+(function (deps, factory) {
+    if (typeof module === 'object' && typeof module.exports === 'object') {
+        var v = factory(require, exports); if (v !== undefined) module.exports = v;
+    }
+    else if (typeof define === 'function' && define.amd) {
+        define(deps, factory);
+    }
+})(["require", "exports", './Velocity', './ClassicalPhysics'], function (require, exports) {
+    var Velocity_1 = require('./Velocity');
+    var ClassicalPhysics_1 = require('./ClassicalPhysics');
+    exports.SIMULATION_FACTOR = 0.000001;
+    var GRAM = 1;
+    exports.KG = 1000 * GRAM;
+    exports.TON = 1000 * exports.KG;
+    exports.STABLE_POINT = new Velocity_1.Velocity(0, 0);
+    (function (VOLUME) {
+        VOLUME[VOLUME["LIGHT"] = 0] = "LIGHT";
+        VOLUME[VOLUME["REGULAR"] = 1] = "REGULAR";
+        VOLUME[VOLUME["HEAVY"] = 2] = "HEAVY";
+    })(exports.VOLUME || (exports.VOLUME = {}));
+    var VOLUME = exports.VOLUME;
+    var NO_WIND = { speed: 0, angle: 0 };
+    var NO_RAIN = null;
+    var O2 = {
+        density: 100,
+        resistance: function (climate) {
+            return exports.STABLE_POINT;
+        }
+    };
+    var CALM = {
+        wind: NO_WIND,
+        rain: NO_RAIN,
+        temprature: 38
+    };
+    var Environment = (function () {
+        function Environment() {
+            this.gravity = 9.8;
+            this.atmosphere = O2;
+            this.climate = CALM;
+            this.elements = [];
+        }
+        Environment.prototype.cycle = function () {
+            ClassicalPhysics_1.ClassicalPhysics.applyEnvironmentEffect(this);
+        };
+        return Environment;
+    })();
+    exports.Environment = Environment;
+});
Index: mathmatics.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mathmatics.js	(date 1578835247248)
+++ mathmatics.js	(date 1578835247248)
@@ -0,0 +1,147 @@
+(function (deps, factory) {
+    if (typeof module === 'object' && typeof module.exports === 'object') {
+        var v = factory(require, exports); if (v !== undefined) module.exports = v;
+    }
+    else if (typeof define === 'function' && define.amd) {
+        define(deps, factory);
+    }
+})(["require", "exports"], function (require, exports) {
+    var Point = (function () {
+        function Point(x, y) {
+            this.x = x;
+            this.y = y;
+        }
+        Point.prototype.angleTo = function (point) {
+            return Math.atan2(this.y - point.y, this.x - point.x);
+        };
+        Point.prototype.distanceTo = function (point) {
+            return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2));
+        };
+        Point.prototype.toString = function () {
+            return this.x + " " + this.y;
+        };
+        return Point;
+    })();
+    exports.Point = Point;
+    var Vector = (function () {
+        function Vector(_x, _y) {
+            this._x = _x;
+            this._y = _y;
+        }
+        Object.defineProperty(Vector.prototype, "x", {
+            get: function () {
+                return this._x;
+            },
+            set: function (x) {
+                if (isNaN(x)) {
+                    debugger;
+                }
+                this._x = x;
+            },
+            enumerable: true,
+            configurable: true
+        });
+        Object.defineProperty(Vector.prototype, "y", {
+            get: function () {
+                return this._y;
+            },
+            set: function (y) {
+                this._y = y;
+            },
+            enumerable: true,
+            configurable: true
+        });
+        Object.defineProperty(Vector.prototype, "angle", {
+            get: function () {
+                return Math.atan2(this.y, this.x);
+            },
+            set: function (r) {
+                this.x = Math.cos(r) * this.length;
+                this.y = Math.sin(r) * this.length;
+            },
+            enumerable: true,
+            configurable: true
+        });
+        Object.defineProperty(Vector.prototype, "length", {
+            get: function () {
+                return Math.sqrt(Math.pow(this.y, 2) + Math.pow(this.x, 2));
+            },
+            set: function (length) {
+                this.x = Math.cos(this.angle) * length;
+                this.y = Math.sin(this.angle) * length;
+            },
+            enumerable: true,
+            configurable: true
+        });
+        Vector.prototype.add = function (vector) {
+            this.x += vector.x;
+            this.y += vector.y;
+            return this;
+        };
+        Vector.prototype.subtract = function (vector) {
+            this.x -= vector.x;
+            this.y -= vector.y;
+            return this;
+        };
+        Vector.prototype.multiply = function (vector) {
+            this.x *= vector.x;
+            this.y *= vector.y;
+            return this;
+        };
+        Vector.prototype.scale = function (factor) {
+            this._x *= factor;
+            this._y *= factor;
+            return this;
+        };
+        Vector.prototype.clone = function () {
+            return new Vector(this.x, this.y);
+        };
+        return Vector;
+    })();
+    exports.Vector = Vector;
+    var Line = (function () {
+        function Line(a, b) {
+            this.a = a;
+            this.b = b;
+        }
+        Line.prototype.hit = function (point) {
+            return Math.abs(point.distanceTo(this.a) + point.distanceTo(this.b) - this.length) < 2;
+        };
+        Object.defineProperty(Line.prototype, "length", {
+            get: function () {
+                return this.a.distanceTo(this.b);
+            },
+            enumerable: true,
+            configurable: true
+        });
+        Line.prototype.intersect = function (line) {
+            var A = this.a;
+            var B = this.b;
+            var C = line.a;
+            var D = line.b;
+            // Line AB represented as a1x + b1y = c1 
+            var a1 = B.y - A.y;
+            var b1 = A.x - B.x;
+            var c1 = a1 * (A.x) + b1 * (A.y);
+            // Line CD represented as a2x + b2y = c2 
+            var a2 = D.y - C.y;
+            var b2 = C.x - D.x;
+            var c2 = a2 * (C.x) + b2 * (C.y);
+            var determinant = a1 * b2 - a2 * b1;
+            if (determinant == 0) {
+                // The lines are parallel. This is simplified 
+                // by returning a pair of FLT_MAX 
+                return A;
+            }
+            var x = (b2 * c1 - b1 * c2) / determinant;
+            var y = (a1 * c2 - a2 * c1) / determinant;
+            var p = new Point(x, y);
+            if (this.hit(p) && line.hit(p)) {
+                return p;
+            }
+            return null;
+        };
+        return Line;
+    })();
+    exports.Line = Line;
+});
Index: mathmatics.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mathmatics.ts	(date 1578835038517)
+++ mathmatics.ts	(date 1578835038517)
@@ -0,0 +1,137 @@
+export class Point {
+    public constructor(public x: number, public y: number) {
+
+    }
+
+    public angleTo(point: Point) {
+        return Math.atan2(this.y - point.y, this.x - point.x)
+    }
+
+    public distanceTo(point: Point) {
+        return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
+    }
+    public toString() {
+        return `${this.x} ${this.y}`
+    }
+}
+
+export class Vector {
+
+    public constructor(private _x: number, private _y: number) {
+
+    }
+
+    public get x() {
+        return this._x;
+    }
+
+    public set x(x: number) {
+        if (isNaN(x)) {
+            debugger;
+        }
+        this._x = x;
+    }
+
+    public get y() {
+        return this._y;
+    }
+
+    public set y(y: number) {
+        this._y = y;
+    }
+
+    public get angle() {
+        return Math.atan2(this.y, this.x);
+    }
+
+    public set angle(r: number) {
+        this.x = Math.cos(r) * this.length;
+        this.y = Math.sin(r) * this.length;
+    }
+
+    public get length() {
+        return Math.sqrt(Math.pow(this.y, 2) + Math.pow(this.x, 2));
+    }
+
+    public set length(length: number) {
+        this.x = Math.cos(this.angle) * length;
+        this.y = Math.sin(this.angle) * length;
+    }
+
+    public add(vector: Vector) {
+        this.x += vector.x;
+        this.y += vector.y;
+        return this;
+    }
+
+    public subtract(vector: Vector) {
+        this.x -= vector.x;
+        this.y -= vector.y;
+        return this;
+    }
+
+    public multiply(vector: Vector) {
+        this.x *= vector.x;
+        this.y *= vector.y;
+        return this;
+    }
+
+    public scale(factor: number) {
+        this._x *= factor;
+        this._y *= factor;
+        return this;
+    }
+
+    public clone() {
+        return new Vector(this.x, this.y);
+    }
+
+}
+
+export class Line {
+    constructor(public a: Point, public b: Point) {
+
+    }
+
+    public hit(point: Point): boolean {
+        return Math.abs(point.distanceTo(this.a) + point.distanceTo(this.b) - this.length) < 2;
+    }
+
+    public get length() {
+        return this.a.distanceTo(this.b);
+    }
+
+    public intersect(line: Line): Point {
+
+        let A = this.a
+        let B = this.b
+        let C = line.a
+        let D = line.b
+        // Line AB represented as a1x + b1y = c1 
+        let a1 = B.y - A.y;
+        let b1 = A.x - B.x;
+        let c1 = a1 * (A.x) + b1 * (A.y);
+
+        // Line CD represented as a2x + b2y = c2 
+        let a2 = D.y - C.y;
+        let b2 = C.x - D.x;
+        let c2 = a2 * (C.x) + b2 * (C.y);
+
+        let determinant = a1 * b2 - a2 * b1;
+
+        if (determinant == 0) {
+            // The lines are parallel. This is simplified 
+            // by returning a pair of FLT_MAX 
+            return A;
+        }
+
+        let x = (b2 * c1 - b1 * c2) / determinant;
+        let y = (a1 * c2 - a2 * c1) / determinant;
+        let p = new Point(x, y);
+        if (this.hit(p) && line.hit(p)) {
+            return p;
+        }
+
+        return null
+    }
+}
Index: Ground.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Ground.ts	(date 1578835038513)
+++ Ground.ts	(date 1578835038513)
@@ -0,0 +1,21 @@
+import { Thing } from "./Thing";
+import { Line, Point } from "./mathmatics";
+import { Graphics } from "./Graphics";
+import { Renderable } from "./game";
+export class Ground extends Thing implements Renderable {
+    constructor(public width = 100, public top = 10) {
+        super();
+        this.locked = true;
+    }
+    render(graphics: Graphics) {
+        if (this.top == 10) {
+            this.width = graphics.width;
+            this.top = graphics.height - 10;
+        }
+        graphics.stroke('green');
+        graphics.drawLine(0, this.top, this.width, this.top);
+    }
+    intersect(line: Line) {
+        return line.intersect(new Line(new Point(0, this.top), new Point(this.width, this.top)));
+    }
+}
Index: Ground.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Ground.js	(date 1578835247284)
+++ Ground.js	(date 1578835247284)
@@ -0,0 +1,40 @@
+var __extends = (this && this.__extends) || function (d, b) {
+    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
+    function __() { this.constructor = d; }
+    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+};
+(function (deps, factory) {
+    if (typeof module === 'object' && typeof module.exports === 'object') {
+        var v = factory(require, exports); if (v !== undefined) module.exports = v;
+    }
+    else if (typeof define === 'function' && define.amd) {
+        define(deps, factory);
+    }
+})(["require", "exports", "./Thing", "./mathmatics"], function (require, exports) {
+    var Thing_1 = require("./Thing");
+    var mathmatics_1 = require("./mathmatics");
+    var Ground = (function (_super) {
+        __extends(Ground, _super);
+        function Ground(width, top) {
+            if (width === void 0) { width = 100; }
+            if (top === void 0) { top = 10; }
+            _super.call(this);
+            this.width = width;
+            this.top = top;
+            this.locked = true;
+        }
+        Ground.prototype.render = function (graphics) {
+            if (this.top == 10) {
+                this.width = graphics.width;
+                this.top = graphics.height - 10;
+            }
+            graphics.stroke('green');
+            graphics.drawLine(0, this.top, this.width, this.top);
+        };
+        Ground.prototype.intersect = function (line) {
+            return line.intersect(new mathmatics_1.Line(new mathmatics_1.Point(0, this.top), new mathmatics_1.Point(this.width, this.top)));
+        };
+        return Ground;
+    })(Thing_1.Thing);
+    exports.Ground = Ground;
+});
Index: ClassicalPhysics.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ClassicalPhysics.ts	(date 1578835038509)
+++ ClassicalPhysics.ts	(date 1578835038509)
@@ -0,0 +1,108 @@
+import { Vector, Line, Point } from './mathmatics';
+import { Thing } from './Thing';
+import { SIMULATION_FACTOR, Environment, TON, STABLE_POINT } from './physics';
+export class ClassicalPhysics {
+    static accelerate(element: Thing, vector: Vector) {
+        element.velocity.add(vector);
+    }
+    static gravitate(element: Thing, gravityEl: Thing) {
+        const dx = element.position.x - gravityEl.position.x, dy = element.position.y - gravityEl.position.y, distance = element.position.distanceTo(gravityEl.position), force = (gravityEl.mass * SIMULATION_FACTOR) / Math.pow(distance, 2);
+        if (distance === 0 || isNaN(distance)) {
+            return new Vector(0, 0); //TODO: fix
+        }
+        const x = dx / distance * force;
+        const y = dy / distance * force;
+        if (isNaN(x) || isNaN(y)) {
+            return new Vector(0, 0); //TODO: fix
+        }
+        return new Vector(x, y);
+    }
+    static applyEnvironmentGravity(env: Environment) {
+        const gravityEl = new Thing();
+        gravityEl.mass = 10000 * TON;
+        for (let el of env.elements) {
+            gravityEl.position.x = el.position.x; // flat earth :P (just jocking)
+            let gravityForce = this.gravitate(el, gravityEl);
+            this.accelerate(el, gravityForce);
+        }
+    }
+    static applyElementsGravity(env: Environment) {
+        for (let thing of env.elements) {
+            for (let gravEl of env.elements) {
+                if (thing === gravEl)
+                    continue;
+                this.accelerate(thing, this.gravitate(thing, gravEl));
+            }
+        }
+    }
+    static applyGravity(env: Environment) {
+        this.applyEnvironmentGravity(env);
+        this.applyElementsGravity(env);
+    }
+    static findCollosion(env: Environment, el: Thing) {
+        const newPoint = new Point(el.position.x + el.velocity.x, el.position.y + el.velocity.y);
+        const movement = new Line(el.position, newPoint);
+        let collesion: Thing = null;
+        let minDistance = Infinity;
+        let intersect: Point = null;
+        for (const c of env.elements) {
+            if (c === el)
+                continue;
+            const pointOfIntersect = c.intersect(movement);
+            if (pointOfIntersect != null) {
+                intersect = pointOfIntersect;
+                const distance = intersect.distanceTo(el.position);
+                if (distance < minDistance) {
+                    minDistance = distance;
+                    collesion = c;
+                }
+            }
+        }
+        if (!collesion)
+            return null;
+
+        return {
+            element: collesion,
+            point: intersect,
+            distance: minDistance
+        };
+    }
+    static applyEnvironmentEffect(env: Environment) {
+        this.applyGravity(env);
+        // this.applyClimate()
+        // this.applyAtmosphere()
+        for (let el of env.elements) {
+            if (!el.locked) {
+                let collesion = this.findCollosion(env, el);
+                if (collesion) {
+                    // console.clear();
+                    console.log('hittted');
+                    // console.log(el)
+
+                    const newPos = new Vector(
+                        collesion.point.x - el.position.x,
+                        collesion.point.y - el.position.y
+                    )
+                    newPos.length += (newPos.length > 0) ? -5 : 5;
+                    el.move(newPos)
+                    // console.log(el.velocity.x, el.velocity.y);
+
+                    let dx = collesion.point.angleTo(el.position)
+                    el.velocity.angle = dx - Math.PI / 2
+
+                    collesion.element.hit(el, collesion.point);
+                    // console.log(el.velocity.x, el.velocity.y);
+                    // el.velocity.x = -.5 * el.velocity.x
+                    // el.velocity.y = -.5 * el.velocity.y
+                    // console.log(collections.length)
+                }
+                else {
+                    el.move(el.velocity);
+                }
+            }
+            else {
+                el.velocity = STABLE_POINT;
+            }
+        }
+    }
+}
Index: physics.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- physics.html	(date 1578835231252)
+++ physics.html	(date 1578835231252)
@@ -0,0 +1,38 @@
+<!DOCTYPE html>
+<html>
+
+<head>
+  <meta charset="utf-8">
+  <title>T-Rex Game</title>
+
+  <style>
+    body,
+    * {
+      padding: 0;
+      margin: 0
+    }
+
+    body {
+      background-repeat: no-repeat;
+      background-position: center, center;
+    }
+
+    #screen {
+      margin: 0 auto;
+      border: solid thin #ccc;
+      display: block;
+
+    }
+  </style>
+
+</head>
+
+<body>
+<canvas id="screen">
+</canvas>
+<script src="./require.js" data-main="./physics_demo" type="text/javascript"></script>
+
+
+</body>
+
+</html>
\ No newline at end of file
Index: physics.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- physics.ts	(date 1578835038517)
+++ physics.ts	(date 1578835038517)
@@ -0,0 +1,64 @@
+import { Velocity } from './Velocity';
+import { Thing } from './Thing';
+import { ClassicalPhysics } from './ClassicalPhysics';
+
+export const SIMULATION_FACTOR = 0.000001;
+const GRAM = 1;
+export const KG = 1000 * GRAM;
+export const TON = 1000 * KG;
+
+export const STABLE_POINT = new Velocity(0, 0);
+
+export interface Wind {
+    speed: number,
+    angle: number;
+}
+
+export enum VOLUME {
+    LIGHT, REGULAR, HEAVY
+}
+
+export interface Rain {
+    speed: number;
+    volume: VOLUME
+}
+
+const NO_WIND = { speed: 0, angle: 0 }
+const NO_RAIN = null;
+
+export interface Climate {
+    wind: Wind,
+    temprature: number,
+    rain: Rain;
+}
+
+export interface Atmosphere {
+    density: number;
+    resistance(climate: Climate): Velocity;
+}
+
+const O2: Atmosphere = {
+    density: 100,
+    resistance(climate: Climate) {
+        return STABLE_POINT;
+    }
+}
+
+const CALM: Climate = {
+    wind: NO_WIND,
+    rain: NO_RAIN,
+    temprature: 38
+}
+
+export class Environment {
+    gravity: number = 9.8;
+    atmosphere: Atmosphere = O2;
+    climate: Climate = CALM;
+
+    elements: Thing[] = []
+
+    public cycle() {
+        ClassicalPhysics.applyEnvironmentEffect(this);
+    }
+}
+
